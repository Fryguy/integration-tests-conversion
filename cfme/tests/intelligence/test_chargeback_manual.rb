# Manual tests
require 'None'
require_relative 'cfme'
include Cfme
pytestmark = [pytest.mark.ignore_stream("upstream"), pytest.mark.manual, test_requirements.chargeback]
RateAssignment = namedtuple("RateAssignment", ["rate_type", "assigned_to"])
assignments = [RateAssignment.("compute", "enterprise"), RateAssignment.("compute", "provider"), RateAssignment.("compute", "cluster"), RateAssignment.("compute", "tagged_vm"), RateAssignment.("compute", "tenant"), RateAssignment.("storage", "enterprise"), RateAssignment.("storage", "datastore"), RateAssignment.("storage", "tagged_datastore"), RateAssignment.("storage", "tenant")]
def test_validate_chargeback_allocation_cost(report_period, rate_period, resource, allocation_method)
  # 
  #   Validate cost for VM resource allocation.
  # 
  #   Polarion:
  #       assignee: tpapaioa
  #       casecomponent: CandU
  #       initialEstimate: 1/6h
  #   
  # pass
end
def test_saved_chargeback_report()
  # 
  #   Verify that saved Chargeback reports are saved in the \"Saved
  #   Chargeback Reports\" folder on the Cloud Intelligence->Chargeback->
  #   Report page.
  # 
  #   Polarion:
  #       assignee: tpapaioa
  #       casecomponent: CandU
  #       caseimportance: medium
  #       initialEstimate: 1/12h
  #   
  # pass
end
def test_chargeback_report_assignment(assignment)
  # Assign compute or storage rate to the given entity. Generate a chargeback report and verify
  #   that the rate is applied to the selected entities only.
  # 
  #   Polarion:
  #       assignee: tpapaioa
  #       casecomponent: CandU
  #       caseimportance: medium
  #       initialEstimate: 1/4h
  #   
  # pass
end
def test_consistent_capitalization_of_cpu_when_creating_compute_chargeback_rate()
  # 
  #   Consistent capitalization of \"CPU\":
  #   1.) When adding a Compute Chargeback Rate, the \"CPU\" group should not
  #   change to \"Cpu\" when you click the \"Add\" button to add a second
  #   tier/row.
  #   2.) The \"CPU Cores\" group should not display as \"Cpu Cores\".
  # 
  #   Polarion:
  #       assignee: tpapaioa
  #       casecomponent: Reporting
  #       caseimportance: medium
  #       initialEstimate: 1/15h
  #   
  # pass
end
def test_chargeback_report_filter(filter_by)
  # 
  #   Verify that chargeback reports can be generated by filtering on the given entity.
  # 
  #   Polarion:
  #       assignee: tpapaioa
  #       casecomponent: CandU
  #       caseimportance: medium
  #       initialEstimate: 1/4h
  #   
  # pass
end
def test_chargeback_preview()
  # 
  #   Verify that Chargeback Preview is generated for VMs
  # 
  #   Polarion:
  #       assignee: tpapaioa
  #       casecomponent: CandU
  #       caseimportance: medium
  #       initialEstimate: 1/10h
  #   
  # pass
end
