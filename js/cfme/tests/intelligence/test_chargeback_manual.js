// Manual tests
require("None");
require_relative("cfme");
include(Cfme);

let pytestmark = [
  pytest.mark.ignore_stream("upstream"),
  pytest.mark.manual,
  test_requirements.chargeback
];

const RateAssignment = namedtuple(
  "RateAssignment",
  ["rate_type", "assigned_to"]
);

let assignments = [
  RateAssignment.call("compute", "enterprise"),
  RateAssignment.call("compute", "provider"),
  RateAssignment.call("compute", "cluster"),
  RateAssignment.call("compute", "tagged_vm"),
  RateAssignment.call("compute", "tenant"),
  RateAssignment.call("storage", "enterprise"),
  RateAssignment.call("storage", "datastore"),
  RateAssignment.call("storage", "tagged_datastore"),
  RateAssignment.call("storage", "tenant")
];

// 
//   Validate cost for VM resource allocation.
// 
//   Polarion:
//       assignee: tpapaioa
//       casecomponent: CandU
//       initialEstimate: 1/6h
//   
// pass
function test_validate_chargeback_allocation_cost(report_period, rate_period, resource, allocation_method) {};

// 
//   Verify that saved Chargeback reports are saved in the \"Saved
//   Chargeback Reports\" folder on the Cloud Intelligence->Chargeback->
//   Report page.
// 
//   Polarion:
//       assignee: tpapaioa
//       casecomponent: CandU
//       caseimportance: medium
//       initialEstimate: 1/12h
//   
// pass
function test_saved_chargeback_report() {};

// Assign compute or storage rate to the given entity. Generate a chargeback report and verify
//   that the rate is applied to the selected entities only.
// 
//   Polarion:
//       assignee: tpapaioa
//       casecomponent: CandU
//       caseimportance: medium
//       initialEstimate: 1/4h
//   
// pass
function test_chargeback_report_assignment(assignment) {};

// 
//   Consistent capitalization of \"CPU\":
//   1.) When adding a Compute Chargeback Rate, the \"CPU\" group should not
//   change to \"Cpu\" when you click the \"Add\" button to add a second
//   tier/row.
//   2.) The \"CPU Cores\" group should not display as \"Cpu Cores\".
// 
//   Polarion:
//       assignee: tpapaioa
//       casecomponent: Reporting
//       caseimportance: medium
//       initialEstimate: 1/15h
//   
// pass
function test_consistent_capitalization_of_cpu_when_creating_compute_chargeback_rate() {};

// 
//   Verify that chargeback reports can be generated by filtering on the given entity.
// 
//   Polarion:
//       assignee: tpapaioa
//       casecomponent: CandU
//       caseimportance: medium
//       initialEstimate: 1/4h
//   
// pass
function test_chargeback_report_filter(filter_by) {};

// 
//   Verify that Chargeback Preview is generated for VMs
// 
//   Polarion:
//       assignee: tpapaioa
//       casecomponent: CandU
//       caseimportance: medium
//       initialEstimate: 1/10h
//   
// pass
function test_chargeback_preview() {}
